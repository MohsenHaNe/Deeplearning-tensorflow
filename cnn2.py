# -*- coding: utf-8 -*-
"""CNN2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UTKp4g2jo6IEuO04AenO1GaimfDml9H1
"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.datasets import fashion_mnist as data
import matplotlib.pyplot as plt

(x_train , y_train ) , (x_test , y_test) = data.load_data()

x_train , x_test  = x_train /255.0 , x_test/255.0

model = keras.models.Sequential([
    keras.layers.Conv2D(50 , 5 ,activation='relu' , padding='SAME',input_shape=[28,28,1] ), ## 5  = filter size
    keras.layers.MaxPool2D(2),
    keras.layers.Conv2D(100 , 3 ,activation='relu' , padding='SAME' ),
    keras.layers.MaxPool2D(2),
    keras.layers.Conv2D(200 , 3 ,activation='relu' , padding='SAME' ),
    keras.layers.MaxPool2D(2),
    keras.layers.Flatten(),
    keras.layers.Dense(100 , activation='relu'),
    keras.layers.Dropout(0.4),
    keras.layers.Dense(50 , activation='relu'),
    keras.layers.Dropout(0.4),
    keras.layers.Dense(10 , activation='softmax'),
])

model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.fit(x_train,y_train,epochs=5,validation_split=0.15)

import cv2

image = cv2.imread('1.jfif')
image.shape

image = image.reshape(1 , 177 , 284 , 3)

image = image/255.0

new_image = tf.image.resize(image , [ 299, 299])

"""## use models without transferlearnin"""

xeption = keras.applications.Xception()

pred = xeption.predict(new_image)

"""## with Transferlearning"""

xeption_base = keras.applications.Xception(include_top=False)
ga_layer = keras.layers.GlobalAveragePooling2D()(xeption_base.output)
out = keras.layers.Dense(10 , activation='softmax')(ga_layer)
xpection_model = keras.Model(inputs=xeption_base.input , outputs=out)

for layer in xeption_base.layers:
  layer.trainable = False

xpection_model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

x_train = x_train[:1000]
y_train = y_train[:1000]

x_test = x_test[:1000]
y_test = y_test[:1000]

x_train = tf.image.resize(x_train , [299,299])

x_train.shape

xpection_model.summary()



"""## Localization 1

"""

xeption_base = keras.applications.Xception(include_top=False)
ga_layer = keras.layers.GlobalAveragePooling2D()(xeption_base.output)
cls_out = keras.layers.Dense(10 , activation='softmax')(ga_layer)
reg_out = keras.layers.Dense(4)(ga_layer)

xpection_model = keras.Model(inputs=xeption_base.input , outputs=[cls_out , reg_out])