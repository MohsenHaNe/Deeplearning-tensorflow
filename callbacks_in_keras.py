# -*- coding: utf-8 -*-
"""Callbacks in keras

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WbWzb6tZD376OuLRpbtkM2ghwB0FfD6V
"""

import tensorflow.keras as keras
import tensorflow as tf
from sklearn.datasets import fetch_california_housing as cali
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler as st
import matplotlib.pyplot as plt

data = cali();
x = data.data
y = data.target

x_train0, x_test , y_train0 , y_test  = train_test_split(x,y)
x_train1, x_val, y_train1 , y_val = train_test_split(x_train0 , y_train0)
ss = st()
x_train_scle = ss.fit_transform(x_train1)
x_val_scale = ss.transform(x_val)
x_test_scale = ss.transform(x_test)

x_train_scle_1 , x_train_scle_2 = x_train_scle[: , :6] , x_train_scle[: , -4:]
x_val_scale_1 , x_val_scale_2 =  x_val_scale[: , :6] , x_val_scale[: , -4:]
x_test_scale_1 , x_test_scale_2  =  x_test_scale[: , :6] , x_test_scale[: , -4:]

input_1 = keras.layers.Input(shape=[6])
input_2 = keras.layers.Input(shape=[4])
hidden_layer_1 = keras.layers.Dense(50,activation='relu')(input_1)
hidden_layer_2 = keras.layers.Dense(10,activation='relu')(hidden_layer_1)
concat_layer = keras.layers.Concatenate()([input_2 , hidden_layer_2]) ## wide
output = keras.layers.Dense(1,name='out1')(concat_layer)
output_helper = keras.layers.Dense(1,name='helper')(hidden_layer_2)

model = keras.Model(inputs=[input_1 , input_2],outputs = [output , output_helper])

model.compile(optimizer='sgd',loss=['mean_squared_error','mse'],metrics=['mean_absolute_error'],loss_weights=[0.8,0.2])

call_back_chek_point = keras.callbacks.ModelCheckpoint('my_modelchekpoint.h5' ,
                                                      save_best_only=True)
call_back_early_stopping = keras.callbacks.EarlyStopping(patience=5 , restore_best_weights=True)
tb_call_back = keras.callbacks.TensorBoard("tb_logs")

history = model.fit((x_train_scle_1 , x_train_scle_2) ,
          (y_train1,y_train1) , epochs=30 ,
          validation_data= ((x_val_scale_1 , x_val_scale_2) , (y_val,y_val)),
          callbacks=[call_back_chek_point , call_back_early_stopping , tb_call_back]
         )

fig , ax = plt.subplots(figsize=(12,5))
ax.plot(history.history['loss'],label='loss')
ax.plot(history.history['accuracy'],label='acc')
ax.plot(history.history['val_loss'],label='val-loss')
ax.plot(history.history['val_accuracy'],label='val-acc')
plt.legend()